{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.13", "generated_at": "2025-10-31T20:43:13.436251Z", "invocation_id": "9a792372-7bf6-47ee-be02-da936fc873c6", "invocation_started_at": "2025-10-31T20:43:08.965152Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.156096Z", "completed_at": "2025-10-31T20:43:13.162981Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.163588Z", "completed_at": "2025-10-31T20:43:13.163615Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.020636320114135742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lending_club_pipeline.stg_customers__cleaned", "compiled": true, "compiled_code": "/*\n    Staging model for customer data\n    \n    Purpose: Clean and normalize raw customer data from Customer.csv\n    \n    Transformations:\n    - Trim whitespace from CustomerID and Name fields\n    - Cast CustomerID to integer type\n    - Normalize Name to lowercase\n    - Normalize HasLoan: 'Yes' -> 'Yes', 'No' -> 'No', 'None' -> NULL\n    \n    Materialization: view (configured in dbt_project.yml)\n*/\n\nwith source as (\n    select\n        CustomerID,\n        Name,\n        HasLoan\n    from \"lending_club\".\"raw\".\"customers_raw\"\n),\n\ncleaned as (\n    select\n        -- CustomerID is already an integer from CSV ingestion\n        CustomerID as customer_id,\n        \n        -- Trim whitespace and normalize Name to lowercase\n        lower(trim(Name)) as name,\n        \n        -- Normalize HasLoan to proper case ('Yes', 'No', NULL for 'None')\n        -- Convert string 'None' to actual NULL value\n        case\n            when lower(trim(HasLoan)) = 'yes' then 'Yes'\n            when lower(trim(HasLoan)) = 'no' then 'No'\n            when lower(trim(HasLoan)) = 'none' then NULL\n            else trim(HasLoan)  -- Preserve original if not recognized\n        end as has_loan\n        \n    from source\n)\n\nselect * from cleaned", "relation_name": "lending_club.main_staging.stg_customers__cleaned", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.144776Z", "completed_at": "2025-10-31T20:43:13.164900Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.165996Z", "completed_at": "2025-10-31T20:43:13.166009Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023661136627197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lending_club_pipeline.stg_accounts__cleaned", "compiled": true, "compiled_code": "/*\n    Staging model for account data\n    \n    Purpose: Clean and normalize raw account data from accounts.csv\n    \n    Transformations:\n    - Trim whitespace from string fields (AccountID, AccountType)\n    - Cast CustomerID to integer and Balance to decimal(10,2)\n    - Normalize AccountType to proper case ('Savings', 'Checking')\n    - Filter out records where Balance is null or empty\n    \n    Materialization: view (configured in dbt_project.yml)\n*/\n\nwith source as (\n    select\n        AccountID,\n        CustomerID,\n        Balance,\n        AccountType\n    from \"lending_club\".\"raw\".\"accounts_raw\"\n),\n\ncleaned as (\n    select\n        -- Trim whitespace from AccountID (string field)\n        trim(cast(AccountID as string)) as account_id,\n        \n        -- Cast CustomerID to integer (already numeric from CSV ingestion)\n        cast(CustomerID as integer) as customer_id,\n        \n        -- Cast Balance to decimal(10,2) (already numeric from CSV ingestion)\n        cast(Balance as decimal(10,2)) as balance,\n        \n        -- Normalize AccountType to proper case ('Savings', 'Checking')\n        case\n            when lower(trim(cast(AccountType as string))) = 'savings' then 'Savings'\n            when lower(trim(cast(AccountType as string))) = 'checking' then 'Checking'\n            else trim(cast(AccountType as string))  -- Preserve original if not recognized\n        end as account_type\n        \n    from source\n    \n    -- Filter out records where Balance is null or empty\n    where Balance is not null\n)\n\nselect * from cleaned", "relation_name": "lending_club.main_staging.stg_accounts__cleaned", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.174946Z", "completed_at": "2025-10-31T20:43:13.212847Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.213425Z", "completed_at": "2025-10-31T20:43:13.213439Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046137094497680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.accepted_values_stg_customers__cleaned_has_loan__Yes__No.4081248bc5", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        has_loan as value_field,\n        count(*) as n_records\n\n    from lending_club.main_staging.stg_customers__cleaned\n    group by has_loan\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.183154Z", "completed_at": "2025-10-31T20:43:13.215862Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.218506Z", "completed_at": "2025-10-31T20:43:13.218521Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04816269874572754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_stg_customers__cleaned_customer_id.4720840913", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom lending_club.main_staging.stg_customers__cleaned\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.196350Z", "completed_at": "2025-10-31T20:43:13.216401Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.220188Z", "completed_at": "2025-10-31T20:43:13.220202Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.048156023025512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_stg_customers__cleaned_name.a30ec107b8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom lending_club.main_staging.stg_customers__cleaned\nwhere name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.203214Z", "completed_at": "2025-10-31T20:43:13.217458Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.226231Z", "completed_at": "2025-10-31T20:43:13.226249Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.053021907806396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.unique_stg_customers__cleaned_customer_id.3fedd4026c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom lending_club.main_staging.stg_customers__cleaned\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.233742Z", "completed_at": "2025-10-31T20:43:13.256677Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.258046Z", "completed_at": "2025-10-31T20:43:13.258062Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02863597869873047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.accepted_values_stg_accounts__cleaned_account_type__Savings__Checking.e43fd0c44d", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        account_type as value_field,\n        count(*) as n_records\n\n    from lending_club.main_staging.stg_accounts__cleaned\n    group by account_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Savings','Checking'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.247467Z", "completed_at": "2025-10-31T20:43:13.265355Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.267257Z", "completed_at": "2025-10-31T20:43:13.267271Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03664088249206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_stg_accounts__cleaned_account_type.bff4f60d21", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_type\nfrom lending_club.main_staging.stg_accounts__cleaned\nwhere account_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.241794Z", "completed_at": "2025-10-31T20:43:13.265922Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.269108Z", "completed_at": "2025-10-31T20:43:13.269133Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.039263010025024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_stg_accounts__cleaned_account_id.a64c3a36da", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom lending_club.main_staging.stg_accounts__cleaned\nwhere account_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.259295Z", "completed_at": "2025-10-31T20:43:13.271091Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.281610Z", "completed_at": "2025-10-31T20:43:13.281627Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026430130004882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_stg_accounts__cleaned_balance.f331a3b1e7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance\nfrom lending_club.main_staging.stg_accounts__cleaned\nwhere balance is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.273910Z", "completed_at": "2025-10-31T20:43:13.292268Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.303405Z", "completed_at": "2025-10-31T20:43:13.303424Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03696107864379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_stg_accounts__cleaned_customer_id.51bf6b83ab", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom lending_club.main_staging.stg_accounts__cleaned\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.286339Z", "completed_at": "2025-10-31T20:43:13.304943Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.306163Z", "completed_at": "2025-10-31T20:43:13.306185Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023745059967041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.unique_stg_accounts__cleaned_account_id.0d7ab1f3ec", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom lending_club.main_staging.stg_accounts__cleaned\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.310562Z", "completed_at": "2025-10-31T20:43:13.333683Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.334278Z", "completed_at": "2025-10-31T20:43:13.334302Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025209903717041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.lending_club_pipeline.account_summary", "compiled": true, "compiled_code": "/*\n    Marts model: Account Summary with Interest Calculation\n    \n    Purpose: Generate final account summary with calculated interest rates\n    and projected balances based on business rules.\n    \n    Business Logic:\n    - Base interest rate by balance tier:\n        * < $10,000: 1.0% (0.01)\n        * $10,000 - $19,999: 1.5% (0.015)\n        * >= $20,000: 2.0% (0.02)\n    - Bonus rate: +0.5% (0.005) if customer has_loan = 'Yes'\n    - Annual interest: balance * interest_rate, rounded to 2 decimals\n    - New balance: original_balance + annual_interest, rounded to 2 decimals\n    \n    Materialization: table (persistent storage for query performance)\n*/\n\n\n\nwith  __dbt__cte__int_accounts__with_customer as (\n/*\n    Intermediate model: Accounts with Customer Information\n    \n    Purpose: Join account records with customer information to enable\n    customer-context analysis of accounts.\n    \n    Business Logic:\n    - INNER JOIN ensures only accounts with valid customer records are included\n    - Preserves all account fields for downstream analysis\n    - Adds has_loan attribute from customer for interest rate calculations\n    \n    Materialization: ephemeral (computed on-the-fly, not stored)\n*/\n\n\n\nwith accounts as (\n    select\n        account_id,\n        customer_id,\n        balance,\n        account_type\n    from lending_club.main_staging.stg_accounts__cleaned\n),\n\ncustomers as (\n    select\n        customer_id,\n        name,\n        has_loan\n    from lending_club.main_staging.stg_customers__cleaned\n),\n\njoined as (\n    select\n        -- All account fields\n        accounts.account_id,\n        accounts.customer_id,\n        accounts.balance,\n        accounts.account_type,\n        \n        -- Customer attribute needed for downstream calculations\n        customers.has_loan\n        \n    from accounts\n    inner join customers\n        on accounts.customer_id = customers.customer_id\n)\n\nselect * from joined\n),  __dbt__cte__int_savings_accounts_only as (\n/*\n    Intermediate model: Savings Accounts Only\n    \n    Purpose: Filter accounts to include only savings accounts for interest\n    rate calculations and analysis.\n    \n    Business Logic:\n    - Filters to account_type = 'Savings' only\n    - Excludes checking accounts from downstream processing\n    - Preserves all fields from the joined account-customer data\n    \n    Materialization: ephemeral (computed on-the-fly, not stored)\n*/\n\n\n\nwith accounts_with_customer as (\n    select\n        account_id,\n        customer_id,\n        balance,\n        account_type,\n        has_loan\n    from __dbt__cte__int_accounts__with_customer\n),\n\nsavings_only as (\n    select\n        account_id,\n        customer_id,\n        balance,\n        has_loan\n    from accounts_with_customer\n    where account_type = 'Savings'\n)\n\nselect * from savings_only\n), savings_accounts as (\n    select\n        customer_id,\n        account_id,\n        balance,\n        has_loan\n    from __dbt__cte__int_savings_accounts_only\n),\n\ninterest_calculation as (\n    select\n        customer_id,\n        account_id,\n        balance as original_balance,\n        \n        -- Calculate base interest rate based on balance tiers\n        case\n            when balance < 10000 then 0.01\n            when balance >= 10000 and balance < 20000 then 0.015\n            when balance >= 20000 then 0.02\n        end as base_rate,\n        \n        -- Add bonus rate if customer has a loan\n        case\n            when has_loan = 'Yes' then 0.005\n            else 0.0\n        end as bonus_rate\n        \n    from savings_accounts\n),\n\nfinal_calculation as (\n    select\n        customer_id,\n        account_id,\n        original_balance,\n        \n        -- Total interest rate (base + bonus)\n        base_rate + bonus_rate as interest_rate,\n        \n        -- Calculate annual interest (rounded to 2 decimals)\n        round(original_balance * (base_rate + bonus_rate), 2) as annual_interest\n        \n    from interest_calculation\n)\n\nselect\n    customer_id,\n    account_id,\n    original_balance,\n    interest_rate,\n    annual_interest,\n    \n    -- Calculate new balance (rounded to 2 decimals)\n    round(original_balance + annual_interest, 2) as new_balance\n    \nfrom final_calculation", "relation_name": "lending_club.main_marts.account_summary", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.359448Z", "completed_at": "2025-10-31T20:43:13.382616Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.383475Z", "completed_at": "2025-10-31T20:43:13.383494Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04357790946960449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_account_summary_annual_interest.a3db6d6f80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect annual_interest\nfrom lending_club.main_marts.account_summary\nwhere annual_interest is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.367639Z", "completed_at": "2025-10-31T20:43:13.385387Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.388107Z", "completed_at": "2025-10-31T20:43:13.388124Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.045552968978881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_account_summary_customer_id.996670a75d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom lending_club.main_marts.account_summary\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.346698Z", "completed_at": "2025-10-31T20:43:13.386360Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.390524Z", "completed_at": "2025-10-31T20:43:13.390539Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05257010459899902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_account_summary_account_id.ccb518171e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom lending_club.main_marts.account_summary\nwhere account_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.375360Z", "completed_at": "2025-10-31T20:43:13.389847Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.393143Z", "completed_at": "2025-10-31T20:43:13.393159Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0476529598236084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_account_summary_interest_rate.23a4075352", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect interest_rate\nfrom lending_club.main_marts.account_summary\nwhere interest_rate is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.397901Z", "completed_at": "2025-10-31T20:43:13.419445Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.426726Z", "completed_at": "2025-10-31T20:43:13.426745Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03530526161193848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_account_summary_new_balance.38d581c33c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect new_balance\nfrom lending_club.main_marts.account_summary\nwhere new_balance is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.408610Z", "completed_at": "2025-10-31T20:43:13.427956Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.428766Z", "completed_at": "2025-10-31T20:43:13.428780Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03305387496948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.not_null_account_summary_original_balance.9402c2a8e3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect original_balance\nfrom lending_club.main_marts.account_summary\nwhere original_balance is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.415155Z", "completed_at": "2025-10-31T20:43:13.429731Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.430920Z", "completed_at": "2025-10-31T20:43:13.430934Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03385281562805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.test_interest_calculation", "compiled": true, "compiled_code": "/*\n    Custom DBT Test: Interest Calculation Logic Validation\n    \n    Purpose: Validate that interest rate calculations follow business rules\n    and that derived fields (annual_interest, new_balance) are computed correctly.\n    \n    Test Criteria:\n    1. Interest rate must be between 0.01 (1%) and 0.025 (2.5%)\n    2. Annual interest must equal original_balance * interest_rate (within rounding tolerance)\n    3. New balance must equal original_balance + annual_interest\n    \n    This test will fail if any records violate these rules.\n*/\n\nwith account_summary as (\n    select\n        customer_id,\n        account_id,\n        original_balance,\n        interest_rate,\n        annual_interest,\n        new_balance\n    from lending_club.main_marts.account_summary\n),\n\nvalidation_checks as (\n    select\n        account_id,\n        \n        -- Check 1: Interest rate is within valid range\n        case\n            when interest_rate < 0.01 or interest_rate > 0.025 then 1\n            else 0\n        end as invalid_interest_rate,\n        \n        -- Check 2: Annual interest calculation is correct (within 0.01 rounding tolerance)\n        case\n            when abs(annual_interest - round(original_balance * interest_rate, 2)) > 0.01 then 1\n            else 0\n        end as invalid_annual_interest,\n        \n        -- Check 3: New balance calculation is correct (within 0.01 rounding tolerance)\n        case\n            when abs(new_balance - round(original_balance + annual_interest, 2)) > 0.01 then 1\n            else 0\n        end as invalid_new_balance\n        \n    from account_summary\n),\n\nfailed_validations as (\n    select\n        account_id,\n        invalid_interest_rate,\n        invalid_annual_interest,\n        invalid_new_balance\n    from validation_checks\n    where invalid_interest_rate = 1\n       or invalid_annual_interest = 1\n       or invalid_new_balance = 1\n)\n\n-- This test passes if no records are returned (all validations passed)\nselect * from failed_validations", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-10-31T20:43:13.420065Z", "completed_at": "2025-10-31T20:43:13.430359Z"}, {"name": "execute", "started_at": "2025-10-31T20:43:13.431888Z", "completed_at": "2025-10-31T20:43:13.431900Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.024882078170776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.lending_club_pipeline.unique_account_summary_account_id.e343a72829", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom lending_club.main_marts.account_summary\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 0.5714800357818604, "args": {"show_all_deprecations": false, "use_colors": true, "cache_selected_only": false, "project_dir": "/Users/priyakarthik/MyProjects/MyNextJobInterview/LendingClub/Assignment/lc-pipeline-v1/dbt_project", "validate_macro_args": false, "partial_parse": true, "show_resource_report": false, "write_json": true, "require_nested_cumulative_type_params": false, "introspect": true, "macro_debugging": false, "require_yaml_configuration_for_mf_time_spines": false, "version_check": true, "skip_nodes_if_on_run_start_fails": false, "log_path": "/Users/priyakarthik/MyProjects/MyNextJobInterview/LendingClub/Assignment/lc-pipeline-v1/dbt_project/logs", "require_generic_test_arguments_property": true, "log_format_file": "debug", "require_batched_execution_for_custom_microbatch_strategy": false, "vars": {}, "log_level": "info", "exclude": [], "partial_parse_file_diff": true, "state_modified_compare_vars": false, "invocation_command": "dbt compile --profiles-dir .", "output": "text", "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "log_format": "default", "require_explicit_package_overrides_for_builtin_materializations": true, "populate_cache": true, "quiet": false, "strict_mode": false, "print": true, "state_modified_compare_more_unrendered_values": false, "defer": false, "select": [], "upload_to_artifacts_ingest_api": false, "indirect_selection": "eager", "require_all_warnings_handled_by_warn_error": false, "favor_state": false, "profiles_dir": ".", "empty": false, "printer_width": 80, "require_resource_names_without_spaces": true, "which": "compile", "static_parser": true, "inject_ephemeral_ctes": true, "log_level_file": "debug", "use_fast_test_edges": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "source_freshness_run_project_hooks": true, "use_colors_file": true}}